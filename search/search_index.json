{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to mecode_viewer","text":""},{"location":"#installation","title":"Installation","text":"<pre><code>pip install mecode_viewer\n</code></pre>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#example-simplest-case","title":"Example: simplest case","text":"<p>All that is needed to run <code>mecode_viewer</code> is to provide a path to your gcode file. By default, <code>mecode_viewer</code> assumes you're using a Nordson pressure controller to control ink extrusion. <pre><code>from  mecode_viewer import mecode_viewer\n\nmecode_viewer(file_name='gcode_file.pgm')\n</code></pre></p>"},{"location":"#example-custom-extrusion-command","title":"Example: custom extrusion command","text":"<p>Linear actuators are also often used to control ink extrusion during printing. This example shows how we can provide a custom <code>extrude_cmd</code> to specify when extrusion starts and stops. E.g., if linear actuator #5 is typically run using <code>FREERUN PDISP5 2.5</code> and stopped using <code>FREERUN PDISP5 STOP</code>, we can simply set <code>extrude_cmd='FREERUN PDISP5'</code>.  <pre><code>from  mecode_viewer import mecode_viewer\n\nmecode_viewer(file_name='gcode_file.pgm', extrude_cmd='FREERUN PDISP5')\n</code></pre></p>"},{"location":"#example-animated-visualization","title":"Example: animated visualization","text":"<p>By default <code>mecode_viewer</code> will display a 3D figure of your gcode toolpath. If you would like to view an animated version, set <code>animate=True</code>. <pre><code>from  mecode_viewer import mecode_viewer\n\nmecode_viewer(file_name='gcode_file.pgm', animate=True)\n</code></pre></p>"},{"location":"#example-mixing-multimaterial-printing","title":"Example: mixing, multimaterial printing","text":"<p>If <code>extrude_cmd</code> is provided with a list or tuple with more than one entry, <code>mecode_viewer</code> will generate a figure color coded for each extrusion source. <pre><code>from mecode_viewer import mecode_viewer\nmecode_viewer('gcode_example.pgm',\n              extrude_cmd=('PDISP1', 'PDISP2'),\n              extrude_stop_cmd=('PDISP1 STOP', 'PDISP2 STOP'))\n</code></pre></p> <p>Warning</p> <p>This currently only work for two extrusion sources. We plan to add support for more extruders / more colors.</p>"},{"location":"#want-to-learn-more","title":"Want to learn more?","text":"<p>Full documenation of <code>mecode_viewer</code> available at API Reference.</p>"},{"location":"#license","title":"License","text":"<p><code>mecode_viewer</code> is distributed under the terms of the MIT license.</p>"},{"location":"api/","title":"API Reference","text":"<p>mecode_viewer()</p> <p>Parameters:</p> Name Type Description Default <code>file_name</code> <code>str</code> <p>name of gcode file</p> required <code>rel_mode</code> <code>bool</code> <p>True if relative coordinates, False if absolute coordinates</p> <code>False</code> <code>animate</code> <code>bool</code> <p>True for 3D animation, False for static matplotlib figure</p> <code>False</code> <code>verbose</code> <code>bool</code> <p>If True, will return print history as a list of dict's</p> <code>False</code> <code>raw_gcode</code> <code>List[str]</code> <p>Can provide list of gcode str commands in lieu of file_name</p> <code>None</code> <code>origin</code> <code>Union[List[Union[int, float]], Tuple[Union[int, float]]]</code> <p>Specify origin as initial starting point</p> <code>(0, 0, 0)</code> <code>extrude_cmd</code> <code>str</code> <p>Command string that is used to start/stop extruding. E.g., Nordson pressure controller will typically use <code>Call togglePress</code>, whereas linear actuators use a command that contains <code>FREERUN PDISP5 ...</code></p> <code>None</code> <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> <p>Optional[List[Dict]]: If <code>verbose</code> is true, will return print history</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; mecode_viewer(file_name='gcode_file.pgm') # simplest case\n</code></pre> <pre><code>&gt;&gt;&gt; mecode_viewer(file_name='gcode_file.pgm', rel_mode=True) # specify relative coordinates are being used\n</code></pre> <pre><code>&gt;&gt;&gt; mecode_viewer(file_name='gcode_file.pgm', animate=True) # show vpython 3D animation\n</code></pre> <pre><code>&gt;&gt;&gt; mecode_viewer(file_name='gcode_file.pgm', extrude_cmd='FREERUN PDISP5') # using linear actuator command to specify extrusion\n</code></pre> <p>Note</p> <p>If <code>extrude_cmd</code> is not provided, the default value will be to use the Nordson controller command (<code>Call togglePress</code>). If <code>extrude_cmd</code> is provided, <code>mecode_viewer</code> will search for <code>extrude_cmd</code> within gcode.</p> Source code in <code>mecode_viewer/mecode_viewer.py</code> <pre><code>def mecode_viewer(file_name: str,\n                  rel_mode: bool=False,\n                  animate: bool=False,\n                  verbose: bool=False,\n                  raw_gcode: List[str]=None,\n                  hide_plots: bool=False,\n                  origin: Union[List[Union[int, float]], Tuple[Union[int, float]]]=(0,0,0),\n                  extrude_cmd:  Union[List[str], Tuple[str]]=None,\n                  extrude_stop_cmd: Union[List[str], Tuple[str]]=None,\n                  **kwargs\n                  ) -&gt; Optional[List[Dict]]:\n    '''mecode_viewer()\n\n        Args:\n            file_name (str): name of gcode file\n            rel_mode (bool): True if relative coordinates, False if absolute coordinates\n            animate (bool): True for 3D animation, False for static matplotlib figure\n            verbose (bool): If True, will return print history as a list of dict's\n            raw_gcode (List[str]): Can provide list of gcode str commands in lieu of file_name\n            origin (Union[List[Union[int, float]], Tuple[Union[int, float]]]): Specify origin as initial starting point\n            extrude_cmd (str): Command string that is used to start/stop extruding. E.g., Nordson pressure controller will typically use `Call togglePress`, whereas linear actuators use a command that contains `FREERUN PDISP5 ...`\n\n        Returns:\n            Optional[List[Dict]]: If `verbose` is true, will return print history\n\n        Examples:\n            &gt;&gt;&gt; mecode_viewer(file_name='gcode_file.pgm') # simplest case\n\n            &gt;&gt;&gt; mecode_viewer(file_name='gcode_file.pgm', rel_mode=True) # specify relative coordinates are being used\n\n            &gt;&gt;&gt; mecode_viewer(file_name='gcode_file.pgm', animate=True) # show vpython 3D animation\n\n            &gt;&gt;&gt; mecode_viewer(file_name='gcode_file.pgm', extrude_cmd='FREERUN PDISP5') # using linear actuator command to specify extrusion\n\n            !!! note\n\n                If `extrude_cmd` is not provided, the default value will be to use the Nordson controller command (`Call togglePress`). If `extrude_cmd` is provided, `mecode_viewer` will search for `extrude_cmd` within gcode.  \n\n\n    '''\n    # variables\n    REL_MODE = rel_mode #True if mode == 'rel' else False\n\n    ACCEL_RATE = 2000\n    DECEL_RATE = 2000\n\n    P_COM_PORT = 5\n    PRESSURE = 0\n    PRINT_SPEED = 0\n    PRINTING= False if isinstance(extrude_cmd, str) else {k.strip() : {'printing': False, 'value': 0} for k in extrude_cmd}\n    ORIGIN = origin\n    VARIABLES = {}\n\n    '''\n        state: (('PDISP1', True, value), ('PDISP2', False, value))\n    '''\n    # history = (\n    #     {\n    #         'REL_MODE': REL_MODE,\n    #         'ACCEL' : ACCEL_RATE,\n    #         'DECEL' : DECEL_RATE,\n    #         'P' : PRESSURE,\n    #         'P_COM_PORT': P_COM_PORT,\n    #         'PRINTING': PRINTING,\n    #         'PRINT_SPEED': 0,\n    #         'COORDS': origin,\n    #         'ORIGIN': origin,\n    #         'CURRENT_POSITION': {'X': origin[0], 'Y': origin[1], 'Z': origin[2]},\n    #         'VARIABLES': VARIABLES\n    #     },\n    # )\n    history = [{\n            'REL_MODE': REL_MODE,\n            'ACCEL' : ACCEL_RATE,\n            'DECEL' : DECEL_RATE,\n            'P' : PRESSURE,\n            'P_COM_PORT': P_COM_PORT,\n            'PRINTING': PRINTING,\n            'PRINT_SPEED': 0,\n            'COORDS': origin,\n            'ORIGIN': origin,\n            'CURRENT_POSITION': {'X': origin[0], 'Y': origin[1], 'Z': origin[2]},\n            'VARIABLES': VARIABLES\n        }]\n\n    move_counter = 1\n\n    if raw_gcode is not None:\n        print('raw gcode')\n        file_contents = raw_gcode\n    # elif isfile(file_name):\n    elif len(file_name) &gt; 0:\n        print('openning file: ', file_name)\n        with open(file_name, 'r') as f:\n            file_contents = f.readlines()\n    else:\n        print('file_name is neither a file nor a string...')\n\n    for line in file_contents:\n        if line.strip().startswith(';') != ';': \n\n            # check if need to re-define origin\n            ORIGIN = _check_origin_change(line, ORIGIN, history[move_counter-1]['COORDS'])\n\n            # keep track of any aerotech variables created with `#define`\n            if '#define' in line:\n                define_pattern = re.compile(r'#define\\s+(\\w+)\\s+([\\d.]+)')\n                match = re.match(define_pattern, line)\n                if match:\n                    variable_name, variable_value = match.groups()\n                    VARIABLES[variable_name] = float(variable_value)\n\n            # identify if gcode is in relative mode\n            REL_MODE = get_print_mode(line, REL_MODE)\n\n            # set accel and decel rates\n            ACCEL_RATE, DECEL_RATE = get_accel_decel(line, ACCEL_RATE, DECEL_RATE)\n\n            # get pressure config\n            PRESSURE, P_COM_PORT = get_pressure_config(line, PRESSURE, P_COM_PORT)\n\n            # are we printing?\n            PRINTING = are_we_printing(line, PRINTING, extrude_cmd, extrude_stop_cmd, VARIABLES)\n\n            if ('G1' in line or 'G01' in line or 'G00' in line):\n                COORDS, PRINT_SPEED = get_print_move(line, history[move_counter-1], REL_MODE, VARIABLES)\n                if COORDS is not None:\n                    history.append({\n                        'REL_MODE': REL_MODE,\n                        'ACCEL' : ACCEL_RATE,\n                        'DECEL' : DECEL_RATE,\n                        'P' : PRESSURE,\n                        'P_COM_PORT': P_COM_PORT,\n                        'PRINTING': PRINTING,\n                        'PRINT_SPEED' : PRINT_SPEED,\n                        'COORDS': COORDS,\n                        'ORIGIN': ORIGIN,\n                        'CURRENT_POSITION': _update_current_position(COORDS, history[move_counter-1]['CURRENT_POSITION'], REL_MODE,),\n                        'VARIABLES': VARIABLES\n                    })\n                    move_counter += 1\n\n    if hide_plots is False:\n        if not animate:\n            plot3d(history, **kwargs)\n        elif animate:\n            animation(history, **kwargs)\n        else:\n            raise ValueError(\"Invalid plotting backend! Choose one of mayavi or matplotlib or matplotlib2d or vpython.\")\n\n    if verbose:\n        return history\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Warning</p> <p>This document is a work in progress.</p> <p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at github.com/rtellez700/mecode_viewer/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with \"bug\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with \"feature\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p><code>mecode_viewer</code> could always use more documentation, whether as part of the official <code>mecode_viewer</code> docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at github.com/rtellez700/mecode_viewer/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions   are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up <code>mecode_viewer</code> for local development.</p> <ol> <li>Fork the <code>mecode_viewer</code> repo on GitHub.</li> <li> <p>Clone your fork locally:: <pre><code>    git clone git@github.com:your_name_here/mecode_viewer.git\n</code></pre></p> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have virtualenvwrapper installed, this is how you set up your fork for local development: <pre><code>    mkvirtualenv mecocde_viewer\n    cd mecocde_viewer/\n    python setup.py develop\n</code></pre></p> </li> <li> <p>Create a branch for local development: <pre><code>    git checkout -b name-of-your-bugfix-or-feature\n</code></pre></p> </li> </ol> <p>Now you can make your changes locally.</p> <ol> <li>When you're done making changes, check that your changes pass flake8 and the tests, including testing other Python versions with tox: <pre><code>    $ flake8 mecode tests\n    $ python setup.py test\n    $ tox\n</code></pre></li> </ol> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> <ol> <li> <p>Commit your changes and push your branch to GitHub: <pre><code>    $ git add .\n    $ git commit -m \"Your detailed description of your changes.\"\n    $ git push origin name-of-your-bugfix-or-feature\n</code></pre></p> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated. Put    your new functionality into a function with a docstring, and add the    feature to the list in README.md.</li> <li>The pull request should work for 3.3, 3.4, 3.5 and for PyPy. Check    https://travis-ci.org/rtellez700_viewer/mecode/pull_requests    and make sure that the tests pass for all supported Python versions.</li> </ol>"},{"location":"license/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2022, Rodrigo Telles</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"}]}